// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __BayesFactor_RcppExports_h__
#define __BayesFactor_RcppExports_h__

#include <RcppEigen.h>
#include <Rcpp.h>

namespace BayesFactor {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("BayesFactor", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("BayesFactor", "BayesFactor_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in BayesFactor");
            }
        }
    }

    inline NumericVector genhypergeo_series_pos(NumericVector U, NumericVector L, NumericVector z, const double tol, const int maxiter, const bool check_mod, const bool check_conds, const bool polynomial) {
        typedef SEXP(*Ptr_genhypergeo_series_pos)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_genhypergeo_series_pos p_genhypergeo_series_pos = NULL;
        if (p_genhypergeo_series_pos == NULL) {
            validateSignature("NumericVector(*genhypergeo_series_pos)(NumericVector,NumericVector,NumericVector,const double,const int,const bool,const bool,const bool)");
            p_genhypergeo_series_pos = (Ptr_genhypergeo_series_pos)R_GetCCallable("BayesFactor", "BayesFactor_genhypergeo_series_pos");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_genhypergeo_series_pos(Rcpp::wrap(U), Rcpp::wrap(L), Rcpp::wrap(z), Rcpp::wrap(tol), Rcpp::wrap(maxiter), Rcpp::wrap(check_mod), Rcpp::wrap(check_conds), Rcpp::wrap(polynomial));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

}

#endif // __BayesFactor_RcppExports_h__
